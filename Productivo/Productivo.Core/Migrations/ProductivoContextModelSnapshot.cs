// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Productivo.Core;

namespace Productivo.Core.Migrations
{
    [DbContext(typeof(ProductivoContext))]
    partial class ProductivoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Productivo.Core.Entities.AbnormalityDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AbnormalityTypesId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AbnormalityTypesId");

                    b.ToTable("AbnormalityDetails");
                });

            modelBuilder.Entity("Productivo.Core.Entities.AbnormalityPlaceDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AbnormalityPlacesId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AbnormalityPlacesId");

                    b.ToTable("AbnormalityPlaceDetails");
                });

            modelBuilder.Entity("Productivo.Core.Entities.AbnormalityPlaceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AbnormalityPlaces");
                });

            modelBuilder.Entity("Productivo.Core.Entities.AbnormalityTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AffectationsId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AffectationsId");

                    b.ToTable("AbnormalityTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.AffectationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Affectations");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CompaniesId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CompaniesId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Productivo.Core.Entities.AreaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Productivo.Core.Entities.BOMDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActivationDateTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("AdicionalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BOMsId")
                        .HasColumnType("int");

                    b.Property<decimal?>("BaseQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ComponentsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("InactivationDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<decimal?>("RequiredQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<decimal?>("WastePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BOMsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("BOMDetails");
                });

            modelBuilder.Entity("Productivo.Core.Entities.BOMEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("InstallationsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MethodsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InstallationsId");

                    b.HasIndex("MethodsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("BOMs");
                });

            modelBuilder.Entity("Productivo.Core.Entities.BankEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Productivo.Core.Entities.BioCareSurveyAnswerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("BioCareSurveyQuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SurveyDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SurveyTime")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BioCareSurveyQuestionsId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("BioCareSurveyAnswers");
                });

            modelBuilder.Entity("Productivo.Core.Entities.BioCareSurveyQuestionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnswerName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BioCareSurveyQuestions");
                });

            modelBuilder.Entity("Productivo.Core.Entities.BrandEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CalendarCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CalendarCategories");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CalendarEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CalendarEventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CalendarCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("CalendarsId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EventEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EventEndTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("EventRemember")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EventStartTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CalendarCategoriesId");

                    b.HasIndex("CalendarsId");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CategoryModelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("ScopeNameCategory")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoryModels");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ChannelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<int>("SpecieId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpecieId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CommImportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateComm")
                        .HasColumnType("datetime");

                    b.Property<int>("ImportsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SuppliersId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImportsId");

                    b.HasIndex("SuppliersId");

                    b.ToTable("CommImports");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AreasId")
                        .HasColumnType("int");

                    b.Property<int?>("BanksId")
                        .HasColumnType("int");

                    b.Property<int?>("BrandsId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryModelsId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<int?>("CommImportsId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ConfigMode")
                        .HasColumnType("int");

                    b.Property<int?>("ContainerTypesId")
                        .HasColumnType("int");

                    b.Property<int?>("ContainersId")
                        .HasColumnType("int");

                    b.Property<int?>("CountriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrenciesId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomsAgenciesId")
                        .HasColumnType("int");

                    b.Property<int?>("DimensionEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeTypesId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<int?>("EvaluationCategoriesId")
                        .HasColumnType("int");

                    b.Property<int?>("FinishEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("FinishPortsId")
                        .HasColumnType("int");

                    b.Property<int?>("IdealModelQuestionsId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportDetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportFilesId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportsId")
                        .HasColumnType("int");

                    b.Property<int?>("IncotermsId")
                        .HasColumnType("int");

                    b.Property<int?>("IoTAlertsId")
                        .HasColumnType("int");

                    b.Property<int?>("IoTMachinesId")
                        .HasColumnType("int");

                    b.Property<int?>("IoTNotificationsId")
                        .HasColumnType("int");

                    b.Property<int?>("IoTVariablesId")
                        .HasColumnType("int");

                    b.Property<int?>("IoTsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<int?>("LocationsId")
                        .HasColumnType("int");

                    b.Property<string>("LogoPath")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<int?>("MachinesId")
                        .HasColumnType("int");

                    b.Property<int?>("MetalUnitTypesId")
                        .HasColumnType("int");

                    b.Property<int?>("MetalUnitsId")
                        .HasColumnType("int");

                    b.Property<int?>("ModelQuestionsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Owner")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("PackingListsId")
                        .HasColumnType("int");

                    b.Property<string>("PathWeb")
                        .HasColumnType("text");

                    b.Property<int?>("PaymentTermsId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypesId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentsId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanPaymentsId")
                        .HasColumnType("int");

                    b.Property<int>("PlansId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessesId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductTypesId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionInfosId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionOrderDetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionOrderFilesId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionOrderProcessesId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionOrdersId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionStopsId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int?>("SectorsId")
                        .HasColumnType("int");

                    b.Property<bool?>("SeederLoad")
                        .HasColumnType("bit");

                    b.Property<int?>("ShapesId")
                        .HasColumnType("int");

                    b.Property<int?>("ShiftsId")
                        .HasColumnType("int");

                    b.Property<int?>("ShipmentsCompaniesId")
                        .HasColumnType("int");

                    b.Property<int?>("StartPortsId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SteelEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("StopsCategoriesId")
                        .HasColumnType("int");

                    b.Property<int?>("StopsId")
                        .HasColumnType("int");

                    b.Property<int?>("SubSectorsId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierTypesId")
                        .HasColumnType("int");

                    b.Property<int?>("SuppliersId")
                        .HasColumnType("int");

                    b.Property<int?>("ThicknessEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("TransportCompaniesId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitsId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("WHLocationEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreasId");

                    b.HasIndex("BanksId");

                    b.HasIndex("BrandsId");

                    b.HasIndex("CategoryModelsId");

                    b.HasIndex("CommImportsId");

                    b.HasIndex("ContainerTypesId");

                    b.HasIndex("ContainersId");

                    b.HasIndex("CountriesId");

                    b.HasIndex("CurrenciesId");

                    b.HasIndex("CustomsAgenciesId");

                    b.HasIndex("DimensionEntityId");

                    b.HasIndex("EmployeeTypesId");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("EvaluationCategoriesId");

                    b.HasIndex("FinishEntityId");

                    b.HasIndex("FinishPortsId");

                    b.HasIndex("IdealModelQuestionsId");

                    b.HasIndex("ImportDetailsId");

                    b.HasIndex("ImportFilesId");

                    b.HasIndex("ImportsId");

                    b.HasIndex("IncotermsId");

                    b.HasIndex("IoTAlertsId");

                    b.HasIndex("IoTMachinesId");

                    b.HasIndex("IoTNotificationsId");

                    b.HasIndex("IoTVariablesId");

                    b.HasIndex("IoTsId");

                    b.HasIndex("LocationsId");

                    b.HasIndex("MachinesId");

                    b.HasIndex("MetalUnitTypesId");

                    b.HasIndex("MetalUnitsId");

                    b.HasIndex("ModelQuestionsId");

                    b.HasIndex("PackingListsId");

                    b.HasIndex("PaymentTermsId");

                    b.HasIndex("PaymentTypesId");

                    b.HasIndex("PaymentsId");

                    b.HasIndex("PlanPaymentsId");

                    b.HasIndex("PlansId");

                    b.HasIndex("ProcessesId");

                    b.HasIndex("ProductTypesId");

                    b.HasIndex("ProductionInfosId");

                    b.HasIndex("ProductionOrderDetailsId");

                    b.HasIndex("ProductionOrderFilesId");

                    b.HasIndex("ProductionOrderProcessesId");

                    b.HasIndex("ProductionOrdersId");

                    b.HasIndex("ProductionStopsId");

                    b.HasIndex("ProductsId");

                    b.HasIndex("SectorsId");

                    b.HasIndex("ShapesId");

                    b.HasIndex("ShiftsId");

                    b.HasIndex("ShipmentsCompaniesId");

                    b.HasIndex("StartPortsId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SteelEntityId");

                    b.HasIndex("StopsCategoriesId");

                    b.HasIndex("StopsId");

                    b.HasIndex("SubSectorsId");

                    b.HasIndex("SupplierTypesId");

                    b.HasIndex("SuppliersId");

                    b.HasIndex("ThicknessEntityId");

                    b.HasIndex("TransportCompaniesId");

                    b.HasIndex("UnitsId");

                    b.HasIndex("WHLocationEntityId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ContainerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BL")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Booking")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("ContainerLoadType")
                        .HasColumnType("int");

                    b.Property<int>("ContainerTypesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("GrossWeight")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ImportsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContainerTypesId");

                    b.HasIndex("ImportsId");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ContainerTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Lenght")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MaxLoadCM")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MaxLoadKG")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("ContainerTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ControlEPPDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("AsignmentDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ControlEPPsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProtectionElementsId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ControlEPPsId");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("ProtectionElementsId");

                    b.ToTable("ControlEPPDetails");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ControlEPPEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ControlEPPDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Order")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("StatusId");

                    b.ToTable("ControlEPPs");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CurrencyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("Factor")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CustomerCommEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomersId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateComm")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomersId");

                    b.ToTable("CustomerComms");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrenciesId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerTypesId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountListsId")
                        .HasColumnType("int");

                    b.Property<int>("DownPaymentApId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DownPaymentPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<int>("InstallationsId")
                        .HasColumnType("int");

                    b.Property<decimal?>("InvoiceCopies")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InvoiceDeliveryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("PaymentMethodsId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTermsId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceListsId")
                        .HasColumnType("int");

                    b.Property<int>("PricesListsId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("TaxesId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<int>("VendorsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrenciesId");

                    b.HasIndex("CustomerTypesId");

                    b.HasIndex("DiscountListsId");

                    b.HasIndex("InstallationsId");

                    b.HasIndex("PaymentMethodsId");

                    b.HasIndex("PaymentTermsId");

                    b.HasIndex("PriceListsId");

                    b.HasIndex("TaxesId");

                    b.HasIndex("VendorsId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CustomerFileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("CustomersId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("TypeFile")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomersId");

                    b.ToTable("CustomerFiles");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CustomerTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CustomsAgencyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Email1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email2")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Phone1")
                        .HasColumnType("text");

                    b.Property<string>("Phone2")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CustomsAgencies");
                });

            modelBuilder.Entity("Productivo.Core.Entities.DiagnosticDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("DiagnosticsId")
                        .HasColumnType("int");

                    b.Property<decimal>("Execution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ModelQuestionsId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticsId");

                    b.HasIndex("ModelQuestionsId");

                    b.ToTable("DiagnosticDetails");
                });

            modelBuilder.Entity("Productivo.Core.Entities.DiagnosticEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodeDiagnostic")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DiagDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDiagDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SubSectorsId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubSectorsId");

                    b.ToTable("Diagnostics");
                });

            modelBuilder.Entity("Productivo.Core.Entities.DimensionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Lenght")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Dimensions");
                });

            modelBuilder.Entity("Productivo.Core.Entities.DiscountListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DiscountLists");
                });

            modelBuilder.Entity("Productivo.Core.Entities.EmailJobConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EnableSSL")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SmtpHost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmailJobConfigs");
                });

            modelBuilder.Entity("Productivo.Core.Entities.EmployeeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("EmergencyName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("EmergencyPhone")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("EmployeeTypesId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<int>("IdCode")
                        .HasColumnType("int");

                    b.Property<string>("LastName1")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("LastName2")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Phone2")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("SecondName")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypesId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Productivo.Core.Entities.EmployeeTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.EvaluationCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationNameCategory")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EvaluationCategories");
                });

            modelBuilder.Entity("Productivo.Core.Entities.FinishEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Finisheses");
                });

            modelBuilder.Entity("Productivo.Core.Entities.FinishPortEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CountriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountriesId");

                    b.ToTable("FinishPorts");
                });

            modelBuilder.Entity("Productivo.Core.Entities.IdealModelQuestionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("IdealExecution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ModelQuestionsId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("SubSectorsId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModelQuestionsId");

                    b.HasIndex("SubSectorsId");

                    b.ToTable("IdealModelQuestions");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ImportDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CertificationPath")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("ImportsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LeadTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal>("PendQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImportsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ImportDetails");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ImportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("CurrenciesId")
                        .HasColumnType("int");

                    b.Property<int>("CustomsAgenciesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CustomsAuthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DO")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DepositDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DocsAgencyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Dollar")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("DollarSim")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EA")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Eta")
                        .HasColumnType("datetime");

                    b.Property<int>("FinishPortsId")
                        .HasColumnType("int");

                    b.Property<string>("Goods")
                        .HasColumnType("text");

                    b.Property<int>("IncotermsId")
                        .HasColumnType("int");

                    b.Property<bool>("Insurance")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Liquidacion")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OC")
                        .HasColumnType("text");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<DateTime?>("POFinishDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentMethodEntityId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTermsId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PortDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShipmentCompaniesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShipmentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StartPortsId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SuppliersId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TRMCosts")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<double?>("Totalton")
                        .HasColumnType("double");

                    b.Property<int>("TransportCompaniesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransportDeliverDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("WarehouseDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CurrenciesId");

                    b.HasIndex("CustomsAgenciesId");

                    b.HasIndex("FinishPortsId");

                    b.HasIndex("IncotermsId");

                    b.HasIndex("PaymentMethodEntityId");

                    b.HasIndex("PaymentTermsId");

                    b.HasIndex("ShipmentCompaniesId");

                    b.HasIndex("StartPortsId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SuppliersId");

                    b.HasIndex("TransportCompaniesId");

                    b.ToTable("Imports");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ImportFileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<int>("ImportsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("TypeFile")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImportsId");

                    b.ToTable("ImportFiles");
                });

            modelBuilder.Entity("Productivo.Core.Entities.IncotermEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Incoterms");
                });

            modelBuilder.Entity("Productivo.Core.Entities.InstallationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Installations");
                });

            modelBuilder.Entity("Productivo.Core.Entities.IoTAlertEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AlertColor")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int?>("IoTNotificationsId")
                        .HasColumnType("int");

                    b.Property<int>("IoTVariablesId")
                        .HasColumnType("int");

                    b.Property<int>("IoTsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("MaxAlertValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("MinAlertValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IoTNotificationsId");

                    b.HasIndex("IoTVariablesId");

                    b.HasIndex("IoTsId");

                    b.ToTable("IoTAlerts");
                });

            modelBuilder.Entity("Productivo.Core.Entities.IoTDataAlertNotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.ToTable("IoTDataAlertNotifications");
                });

            modelBuilder.Entity("Productivo.Core.Entities.IoTDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("DispositivoIOT")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Valores")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("IoTDatas");
                });

            modelBuilder.Entity("Productivo.Core.Entities.IoTEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodeIoT")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("URLPath")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IoTs");
                });

            modelBuilder.Entity("Productivo.Core.Entities.IoTMachineEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("IoTsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MachinesId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IoTMachines");
                });

            modelBuilder.Entity("Productivo.Core.Entities.IoTNotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Emails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IoTAlertsId")
                        .HasColumnType("int");

                    b.Property<int>("IoTsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IoTsId");

                    b.ToTable("IoTNotifications");
                });

            modelBuilder.Entity("Productivo.Core.Entities.IoTVariableEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<bool>("DailyReset")
                        .HasColumnType("bit");

                    b.Property<int>("IoTsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<decimal>("UpdateInterval")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IoTsId");

                    b.ToTable("IoTVariables");
                });

            modelBuilder.Entity("Productivo.Core.Entities.JobEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Productivo.Core.Entities.LocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Productivo.Core.Entities.MachineEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrandsId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<bool>("Insurance")
                        .HasColumnType("bit");

                    b.Property<int?>("IoTMachineEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LocationsId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<decimal>("OutputStandard")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProcessesId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandsId");

                    b.HasIndex("IoTMachineEntityId");

                    b.HasIndex("LocationsId");

                    b.HasIndex("ProcessesId");

                    b.HasIndex("StatusId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Productivo.Core.Entities.MeatCuttingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MainCutId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TopQuantity")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("Yield")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("MainCutId");

                    b.ToTable("CutsOfMeats");
                });

            modelBuilder.Entity("Productivo.Core.Entities.MetalUnitEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("DimensionsId")
                        .HasColumnType("int");

                    b.Property<int>("FinishesesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MetalCode")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8);

                    b.Property<int>("MetalUnitTypesId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("SteelsId")
                        .HasColumnType("int");

                    b.Property<int>("ThicknessesId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<int>("WHLocationsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WarehouseDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DimensionsId");

                    b.HasIndex("FinishesesId");

                    b.HasIndex("MetalUnitTypesId");

                    b.HasIndex("SteelsId");

                    b.HasIndex("ThicknessesId");

                    b.HasIndex("WHLocationsId");

                    b.ToTable("MetalUnits");
                });

            modelBuilder.Entity("Productivo.Core.Entities.MetalUnitTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MetalUnitTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.MethodEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Methods");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ModelQuestionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryModelsId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("EvaluationCategoriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("WeightQuestion")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryModelsId");

                    b.HasIndex("EvaluationCategoriesId");

                    b.ToTable("ModelQuestions");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ModuleCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ModuleCategories");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ModuleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ModuleCategoriesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModuleCategoriesId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ModuleRolEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Access")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RolId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SubModulesId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubModulesId");

                    b.ToTable("ModuleRoles");
                });

            modelBuilder.Entity("Productivo.Core.Entities.MovementBasicEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MovementBasics");
                });

            modelBuilder.Entity("Productivo.Core.Entities.MovementClassEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Distance")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MotionRange")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MovementClasses");
                });

            modelBuilder.Entity("Productivo.Core.Entities.MovementDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MovementBasicsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MovementBasicsId");

                    b.ToTable("MovementDetails");
                });

            modelBuilder.Entity("Productivo.Core.Entities.MovementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<double?>("Distance")
                        .HasColumnType("double");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("Productivo.Core.Entities.MovementTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MovementTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.PackingListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("GrossWeight")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Heat")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("ImportDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("ImportsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("NetWeight")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Package")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.Property<decimal>("Pieces")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImportDetailsId");

                    b.HasIndex("ImportsId");

                    b.ToTable("PackingLists");
                });

            modelBuilder.Entity("Productivo.Core.Entities.PaymentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BanksId")
                        .HasColumnType("int");

                    b.Property<decimal>("ChangeRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("CurrenciesId")
                        .HasColumnType("int");

                    b.Property<int>("ImportsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LegalDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Legalization")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentTypesId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BanksId");

                    b.HasIndex("CurrenciesId");

                    b.HasIndex("ImportsId");

                    b.HasIndex("PaymentTypesId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Productivo.Core.Entities.PaymentMethodEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Productivo.Core.Entities.PaymentTermEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerms");
                });

            modelBuilder.Entity("Productivo.Core.Entities.PaymentTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.PlanEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActiveDays")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastPurchase")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Productivo.Core.Entities.PlanPaymentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentTypesId")
                        .HasColumnType("int");

                    b.Property<int>("PlansId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypesId");

                    b.HasIndex("PlansId");

                    b.ToTable("PlanPayments");
                });

            modelBuilder.Entity("Productivo.Core.Entities.PriceListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PriceLists");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProcessEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<decimal?>("ProductionTarget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("CodeERP")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("Factor1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Factor2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Maximum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Minimum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProductTypesId")
                        .HasColumnType("int");

                    b.Property<int>("ShapesId")
                        .HasColumnType("int");

                    b.Property<int>("UnitsId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypesId");

                    b.HasIndex("ShapesId");

                    b.HasIndex("UnitsId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductionInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductionOrdersId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrdersId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductionInfos");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductionOrderDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinishDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("LenghtDifference")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OddmentQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProdQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductionOrdersId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<decimal?>("Speed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TuneUp")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<decimal?>("WasteQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("ProductionOrdersId");

                    b.ToTable("ProductionOrderDetails");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductionOrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<decimal?>("ExpectedQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Lenght")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("LenghtTolerance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("Lot")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxPackageWeight")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("MinPackageWeight")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Order")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("ProdDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProdFinishDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProdStartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("ShiftsId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.HasIndex("ShiftsId");

                    b.HasIndex("StatusId");

                    b.ToTable("ProductionOrders");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductionOrderFileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductionOrdersId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("TypeFile")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrdersId");

                    b.ToTable("ProductionOrderFiles");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductionOrderProcessEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MachinesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionOrdersId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("MachinesId");

                    b.HasIndex("ProductionOrdersId");

                    b.ToTable("ProductionOrderProcesses");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductionStopEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinishDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MachinesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionOrdersId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StopsId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("MachinesId");

                    b.HasIndex("ProductionOrdersId");

                    b.HasIndex("StopsId");

                    b.ToTable("ProductionStops");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProtectionCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProtectionCategories");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProtectionElementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("CodeERP")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("Factor1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Factor2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageElement")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("MaxDayAsignment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Maximum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Minimum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProtectionTypesId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("UnitsId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProtectionTypesId");

                    b.HasIndex("UnitsId");

                    b.ToTable("ProtectionElements");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProtectionTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<int>("ProtectionCategoriesId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProtectionCategoriesId");

                    b.ToTable("ProtectionTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.RawMaterialEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<int>("PackingListsId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionOrdersId")
                        .HasColumnType("int");

                    b.Property<string>("RawCode")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8);

                    b.Property<int?>("RawMaterialTypeEntityId")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialTypesId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<int>("WHLocationsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WarehouseDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PackingListsId");

                    b.HasIndex("ProductionOrdersId");

                    b.HasIndex("RawMaterialTypeEntityId");

                    b.HasIndex("RawMaterialTypesId");

                    b.HasIndex("WHLocationsId");

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("Productivo.Core.Entities.RawMaterialTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RawMaterialTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.RouteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("InstallationsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InstallationsId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.RouteOperationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProcessesId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("RoutesId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProcessesId");

                    b.HasIndex("RoutesId");

                    b.ToTable("RouteOperations");
                });

            modelBuilder.Entity("Productivo.Core.Entities.SectorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ShapeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Shapes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ShiftEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("RestTimeShift")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShiftEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ShiftStart")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ShipmentCompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("URLTracking")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShipmentCompanies");
                });

            modelBuilder.Entity("Productivo.Core.Entities.SpecieEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Productivo.Core.Entities.StartPortEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CountriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountriesId");

                    b.ToTable("StartPorts");
                });

            modelBuilder.Entity("Productivo.Core.Entities.StatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Productivo.Core.Entities.SteelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AISI")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("DIN")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Steels");
                });

            modelBuilder.Entity("Productivo.Core.Entities.StopEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AreasId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("StopsCategoriesId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AreasId");

                    b.HasIndex("StopsCategoriesId");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("Productivo.Core.Entities.StopsCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StopsCategories");
                });

            modelBuilder.Entity("Productivo.Core.Entities.StrippingDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("StrippingId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("StrippingId");

                    b.ToTable("StrippingDetails");
                });

            modelBuilder.Entity("Productivo.Core.Entities.StrippingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Strips");
                });

            modelBuilder.Entity("Productivo.Core.Entities.SubModuleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ModulesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("URLPath")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModulesId");

                    b.ToTable("SubModules");
                });

            modelBuilder.Entity("Productivo.Core.Entities.SubSectorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SectorsId")
                        .HasColumnType("int");

                    b.Property<string>("SubSector")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SectorsId");

                    b.ToTable("SubSectors");
                });

            modelBuilder.Entity("Productivo.Core.Entities.SupplierEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<int>("CountriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Email1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email2")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Phone1")
                        .HasColumnType("text");

                    b.Property<string>("Phone2")
                        .HasColumnType("text");

                    b.Property<int>("SupplierTypesId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountriesId");

                    b.HasIndex("SupplierTypesId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Productivo.Core.Entities.SupplierTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupplierTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.TaskTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("JobsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobsId");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.TaxEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<decimal?>("TaxPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ThicknessEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Thicknesses");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ToolEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("ToolTypesId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("ToolTypesId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ToolTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ToolTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.TransportCompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("URLTracking")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransportCompanies");
                });

            modelBuilder.Entity("Productivo.Core.Entities.UnitEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Productivo.Core.Entities.VendorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<int>("InstallationsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<int>("VendorTypesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstallationsId");

                    b.HasIndex("VendorTypesId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Productivo.Core.Entities.VendorTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VendorTypes");
                });

            modelBuilder.Entity("Productivo.Core.Entities.WHLocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Position")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WHLocations");
                });

            modelBuilder.Entity("Productivo.Core.Entities.WareHouseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<string>("Email1")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.Property<int>("WareHouseTypesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WareHouseTypesId");

                    b.ToTable("WareHouses");
                });

            modelBuilder.Entity("Productivo.Core.Entities.WareHouseTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WareHouseTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.AbnormalityDetailEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.AbnormalityTypeEntity", "AbnormalityTypes")
                        .WithMany("AbnormalityDetails")
                        .HasForeignKey("AbnormalityTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.AbnormalityPlaceDetailEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.AbnormalityPlaceEntity", "AbnormalityPlaces")
                        .WithMany("AbnormalityPlaceDetails")
                        .HasForeignKey("AbnormalityPlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.AbnormalityTypeEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.AffectationEntity", "Affectations")
                        .WithMany("AbnormalityTypes")
                        .HasForeignKey("AffectationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Productivo.Core.Entities.CompanyEntity", "Companies")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("CompaniesId");
                });

            modelBuilder.Entity("Productivo.Core.Entities.BOMDetailEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.BOMEntity", "BOMs")
                        .WithMany("BOMDetails")
                        .HasForeignKey("BOMsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ProductEntity", "Products")
                        .WithMany("BOMDetails")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.BOMEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.InstallationEntity", "Installations")
                        .WithMany("BOMs")
                        .HasForeignKey("InstallationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.MethodEntity", "Methods")
                        .WithMany("BOMs")
                        .HasForeignKey("MethodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ProductEntity", "Products")
                        .WithMany("BOMs")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.BioCareSurveyAnswerEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.BioCareSurveyQuestionEntity", "BioCareSurveyQuestions")
                        .WithMany("BioCareSurveyAnswers")
                        .HasForeignKey("BioCareSurveyQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.EmployeeEntity", "Employees")
                        .WithMany("BioCareSurveyAnswers")
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.CalendarEventEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.CalendarCategoryEntity", "CalendarCategories")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("CalendarCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.CalendarEntity", "Calendars")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("CalendarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ChannelEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.SpecieEntity", "Specie")
                        .WithMany()
                        .HasForeignKey("SpecieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.CommImportEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ImportEntity", "Imports")
                        .WithMany("CommImports")
                        .HasForeignKey("ImportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.SupplierEntity", "Suppliers")
                        .WithMany("CommImports")
                        .HasForeignKey("SuppliersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.CompanyEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.AreaEntity", "Areas")
                        .WithMany("Companies")
                        .HasForeignKey("AreasId");

                    b.HasOne("Productivo.Core.Entities.BankEntity", "Banks")
                        .WithMany("Companies")
                        .HasForeignKey("BanksId");

                    b.HasOne("Productivo.Core.Entities.BrandEntity", "Brands")
                        .WithMany("Companies")
                        .HasForeignKey("BrandsId");

                    b.HasOne("Productivo.Core.Entities.CategoryModelEntity", "CategoryModels")
                        .WithMany("Companies")
                        .HasForeignKey("CategoryModelsId");

                    b.HasOne("Productivo.Core.Entities.CommImportEntity", "CommImports")
                        .WithMany("Companies")
                        .HasForeignKey("CommImportsId");

                    b.HasOne("Productivo.Core.Entities.ContainerTypeEntity", "ContainerTypes")
                        .WithMany("Companies")
                        .HasForeignKey("ContainerTypesId");

                    b.HasOne("Productivo.Core.Entities.ContainerEntity", "Containers")
                        .WithMany("Companies")
                        .HasForeignKey("ContainersId");

                    b.HasOne("Productivo.Core.Entities.CountryEntity", "Countries")
                        .WithMany("Companies")
                        .HasForeignKey("CountriesId");

                    b.HasOne("Productivo.Core.Entities.CurrencyEntity", "Currencies")
                        .WithMany("Companies")
                        .HasForeignKey("CurrenciesId");

                    b.HasOne("Productivo.Core.Entities.CustomsAgencyEntity", "CustomsAgencies")
                        .WithMany("Companies")
                        .HasForeignKey("CustomsAgenciesId");

                    b.HasOne("Productivo.Core.Entities.DimensionEntity", null)
                        .WithMany("Companies")
                        .HasForeignKey("DimensionEntityId");

                    b.HasOne("Productivo.Core.Entities.EmployeeTypeEntity", "EmployeeTypes")
                        .WithMany("Companies")
                        .HasForeignKey("EmployeeTypesId");

                    b.HasOne("Productivo.Core.Entities.EmployeeEntity", "Employees")
                        .WithMany("Companies")
                        .HasForeignKey("EmployeesId");

                    b.HasOne("Productivo.Core.Entities.EvaluationCategoryEntity", "EvaluationCategories")
                        .WithMany("Companies")
                        .HasForeignKey("EvaluationCategoriesId");

                    b.HasOne("Productivo.Core.Entities.FinishEntity", null)
                        .WithMany("Companies")
                        .HasForeignKey("FinishEntityId");

                    b.HasOne("Productivo.Core.Entities.FinishPortEntity", "FinishPorts")
                        .WithMany("Companies")
                        .HasForeignKey("FinishPortsId");

                    b.HasOne("Productivo.Core.Entities.IdealModelQuestionEntity", "IdealModelQuestions")
                        .WithMany("Companies")
                        .HasForeignKey("IdealModelQuestionsId");

                    b.HasOne("Productivo.Core.Entities.ImportDetailEntity", "ImportDetails")
                        .WithMany("Companies")
                        .HasForeignKey("ImportDetailsId");

                    b.HasOne("Productivo.Core.Entities.ImportFileEntity", "ImportFiles")
                        .WithMany("Companies")
                        .HasForeignKey("ImportFilesId");

                    b.HasOne("Productivo.Core.Entities.ImportEntity", "Imports")
                        .WithMany("Companies")
                        .HasForeignKey("ImportsId");

                    b.HasOne("Productivo.Core.Entities.IncotermEntity", "Incoterms")
                        .WithMany("Companies")
                        .HasForeignKey("IncotermsId");

                    b.HasOne("Productivo.Core.Entities.IoTAlertEntity", "IoTAlerts")
                        .WithMany("Companies")
                        .HasForeignKey("IoTAlertsId");

                    b.HasOne("Productivo.Core.Entities.IoTMachineEntity", "IoTMachines")
                        .WithMany("Companies")
                        .HasForeignKey("IoTMachinesId");

                    b.HasOne("Productivo.Core.Entities.IoTNotificationEntity", "IoTNotifications")
                        .WithMany("Companies")
                        .HasForeignKey("IoTNotificationsId");

                    b.HasOne("Productivo.Core.Entities.IoTVariableEntity", "IoTVariables")
                        .WithMany("Companies")
                        .HasForeignKey("IoTVariablesId");

                    b.HasOne("Productivo.Core.Entities.IoTEntity", "IoTs")
                        .WithMany("Companies")
                        .HasForeignKey("IoTsId");

                    b.HasOne("Productivo.Core.Entities.LocationEntity", "Locations")
                        .WithMany("Companies")
                        .HasForeignKey("LocationsId");

                    b.HasOne("Productivo.Core.Entities.MachineEntity", "Machines")
                        .WithMany("Companies")
                        .HasForeignKey("MachinesId");

                    b.HasOne("Productivo.Core.Entities.MetalUnitTypeEntity", "MetalUnitTypes")
                        .WithMany("Companies")
                        .HasForeignKey("MetalUnitTypesId");

                    b.HasOne("Productivo.Core.Entities.MetalUnitEntity", "MetalUnits")
                        .WithMany("Companies")
                        .HasForeignKey("MetalUnitsId");

                    b.HasOne("Productivo.Core.Entities.ModelQuestionEntity", "ModelQuestions")
                        .WithMany("Companies")
                        .HasForeignKey("ModelQuestionsId");

                    b.HasOne("Productivo.Core.Entities.PackingListEntity", "PackingLists")
                        .WithMany("Companies")
                        .HasForeignKey("PackingListsId");

                    b.HasOne("Productivo.Core.Entities.PaymentTermEntity", "PaymentTerms")
                        .WithMany("Companies")
                        .HasForeignKey("PaymentTermsId");

                    b.HasOne("Productivo.Core.Entities.PaymentTypeEntity", "PaymentTypes")
                        .WithMany("Companies")
                        .HasForeignKey("PaymentTypesId");

                    b.HasOne("Productivo.Core.Entities.PaymentEntity", "Payments")
                        .WithMany("Companies")
                        .HasForeignKey("PaymentsId");

                    b.HasOne("Productivo.Core.Entities.PlanPaymentEntity", "PlanPayments")
                        .WithMany("Companies")
                        .HasForeignKey("PlanPaymentsId");

                    b.HasOne("Productivo.Core.Entities.PlanEntity", "Plans")
                        .WithMany("Companies")
                        .HasForeignKey("PlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ProcessEntity", "Processes")
                        .WithMany("Companies")
                        .HasForeignKey("ProcessesId");

                    b.HasOne("Productivo.Core.Entities.ProductTypeEntity", "ProductTypes")
                        .WithMany("Companies")
                        .HasForeignKey("ProductTypesId");

                    b.HasOne("Productivo.Core.Entities.ProductionInfoEntity", "ProductionInfos")
                        .WithMany("Companies")
                        .HasForeignKey("ProductionInfosId");

                    b.HasOne("Productivo.Core.Entities.ProductionOrderDetailEntity", "ProductionOrderDetails")
                        .WithMany("Companies")
                        .HasForeignKey("ProductionOrderDetailsId");

                    b.HasOne("Productivo.Core.Entities.ProductionOrderFileEntity", "ProductionOrderFiles")
                        .WithMany("Companies")
                        .HasForeignKey("ProductionOrderFilesId");

                    b.HasOne("Productivo.Core.Entities.ProductionOrderProcessEntity", "ProductionOrderProcesses")
                        .WithMany("Companies")
                        .HasForeignKey("ProductionOrderProcessesId");

                    b.HasOne("Productivo.Core.Entities.ProductionOrderEntity", "ProductionOrders")
                        .WithMany("Companies")
                        .HasForeignKey("ProductionOrdersId");

                    b.HasOne("Productivo.Core.Entities.ProductionStopEntity", "ProductionStops")
                        .WithMany("Companies")
                        .HasForeignKey("ProductionStopsId");

                    b.HasOne("Productivo.Core.Entities.ProductEntity", "Products")
                        .WithMany("Companies")
                        .HasForeignKey("ProductsId");

                    b.HasOne("Productivo.Core.Entities.SectorEntity", "Sectors")
                        .WithMany("Companies")
                        .HasForeignKey("SectorsId");

                    b.HasOne("Productivo.Core.Entities.ShapeEntity", "Shapes")
                        .WithMany("Companies")
                        .HasForeignKey("ShapesId");

                    b.HasOne("Productivo.Core.Entities.ShiftEntity", "Shifts")
                        .WithMany("Companies")
                        .HasForeignKey("ShiftsId");

                    b.HasOne("Productivo.Core.Entities.ShipmentCompanyEntity", "ShipmentsCompanies")
                        .WithMany("Companies")
                        .HasForeignKey("ShipmentsCompaniesId");

                    b.HasOne("Productivo.Core.Entities.StartPortEntity", "StartPorts")
                        .WithMany("Companies")
                        .HasForeignKey("StartPortsId");

                    b.HasOne("Productivo.Core.Entities.StatusEntity", "Status")
                        .WithMany("Companies")
                        .HasForeignKey("StatusId");

                    b.HasOne("Productivo.Core.Entities.SteelEntity", null)
                        .WithMany("Companies")
                        .HasForeignKey("SteelEntityId");

                    b.HasOne("Productivo.Core.Entities.StopsCategoryEntity", "StopsCategories")
                        .WithMany("Companies")
                        .HasForeignKey("StopsCategoriesId");

                    b.HasOne("Productivo.Core.Entities.StopEntity", "Stops")
                        .WithMany("Companies")
                        .HasForeignKey("StopsId");

                    b.HasOne("Productivo.Core.Entities.SubSectorEntity", "SubSectors")
                        .WithMany("Companies")
                        .HasForeignKey("SubSectorsId");

                    b.HasOne("Productivo.Core.Entities.SupplierTypeEntity", "SupplierTypes")
                        .WithMany("Companies")
                        .HasForeignKey("SupplierTypesId");

                    b.HasOne("Productivo.Core.Entities.SupplierEntity", "Suppliers")
                        .WithMany("Companies")
                        .HasForeignKey("SuppliersId");

                    b.HasOne("Productivo.Core.Entities.ThicknessEntity", null)
                        .WithMany("Companies")
                        .HasForeignKey("ThicknessEntityId");

                    b.HasOne("Productivo.Core.Entities.TransportCompanyEntity", "TransportCompanies")
                        .WithMany("Companies")
                        .HasForeignKey("TransportCompaniesId");

                    b.HasOne("Productivo.Core.Entities.UnitEntity", "Units")
                        .WithMany("Companies")
                        .HasForeignKey("UnitsId");

                    b.HasOne("Productivo.Core.Entities.WHLocationEntity", null)
                        .WithMany("Companies")
                        .HasForeignKey("WHLocationEntityId");
                });

            modelBuilder.Entity("Productivo.Core.Entities.ContainerEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ContainerTypeEntity", "ContainerTypes")
                        .WithMany("Containers")
                        .HasForeignKey("ContainerTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ImportEntity", "Imports")
                        .WithMany("Containers")
                        .HasForeignKey("ImportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ControlEPPDetailEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ControlEPPEntity", "ControlEPPs")
                        .WithMany("ControlEPPDetails")
                        .HasForeignKey("ControlEPPsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.EmployeeEntity", "Employees")
                        .WithMany("ControlEPPDetails")
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ProtectionElementEntity", "ProtectionElements")
                        .WithMany("ControlEPPDetails")
                        .HasForeignKey("ProtectionElementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ControlEPPEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.EmployeeEntity", "Employees")
                        .WithMany("ControlEPPs")
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.StatusEntity", "Status")
                        .WithMany("ControlEPPs")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.CustomerCommEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.CustomerEntity", "Customers")
                        .WithMany("CustomerComms")
                        .HasForeignKey("CustomersId");
                });

            modelBuilder.Entity("Productivo.Core.Entities.CustomerEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.CurrencyEntity", "Currencies")
                        .WithMany("Customers")
                        .HasForeignKey("CurrenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.CustomerTypeEntity", "CustomerTypes")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.DiscountListEntity", "DiscountLists")
                        .WithMany("Customers")
                        .HasForeignKey("DiscountListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.InstallationEntity", "Installations")
                        .WithMany("Customers")
                        .HasForeignKey("InstallationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.PaymentMethodEntity", "PaymentMethods")
                        .WithMany("Customers")
                        .HasForeignKey("PaymentMethodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.PaymentTermEntity", "PaymentTerms")
                        .WithMany("Customers")
                        .HasForeignKey("PaymentTermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.PriceListEntity", "PriceLists")
                        .WithMany("Customers")
                        .HasForeignKey("PriceListsId");

                    b.HasOne("Productivo.Core.Entities.TaxEntity", "Taxes")
                        .WithMany("Customers")
                        .HasForeignKey("TaxesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.VendorEntity", "Vendors")
                        .WithMany("Customers")
                        .HasForeignKey("VendorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.CustomerFileEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.CustomerEntity", "Customers")
                        .WithMany("CustomerFiles")
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.DiagnosticDetailEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.DiagnosticEntity", "Diagnostics")
                        .WithMany("DiagnosticDetails")
                        .HasForeignKey("DiagnosticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ModelQuestionEntity", "ModelQuestions")
                        .WithMany("DiagnosticDetails")
                        .HasForeignKey("ModelQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.DiagnosticEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.EmployeeEntity", "Employees")
                        .WithMany("Diagnostics")
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.StatusEntity", "Status")
                        .WithMany("Diagnostics")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.SubSectorEntity", "SubSectors")
                        .WithMany("Diagnostics")
                        .HasForeignKey("SubSectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.EmployeeTypeEntity", "EmployeeTypes")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.FinishPortEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.CountryEntity", "Countries")
                        .WithMany("FinishPorts")
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.IdealModelQuestionEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ModelQuestionEntity", "ModelQuestions")
                        .WithMany("IdealModelQuestions")
                        .HasForeignKey("ModelQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.SubSectorEntity", "SubSectors")
                        .WithMany("IdealModelQuestions")
                        .HasForeignKey("SubSectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ImportDetailEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ImportEntity", "Imports")
                        .WithMany("ImportDetails")
                        .HasForeignKey("ImportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ProductEntity", "Products")
                        .WithMany("ImportDetails")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ImportEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.CurrencyEntity", "Currencies")
                        .WithMany("Imports")
                        .HasForeignKey("CurrenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.CustomsAgencyEntity", "CustomsAgencies")
                        .WithMany("Imports")
                        .HasForeignKey("CustomsAgenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.FinishPortEntity", "FinishPorts")
                        .WithMany("Imports")
                        .HasForeignKey("FinishPortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.IncotermEntity", "Incoterms")
                        .WithMany("Imports")
                        .HasForeignKey("IncotermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.PaymentMethodEntity", null)
                        .WithMany("Imports")
                        .HasForeignKey("PaymentMethodEntityId");

                    b.HasOne("Productivo.Core.Entities.PaymentTermEntity", "PaymentTerms")
                        .WithMany("Imports")
                        .HasForeignKey("PaymentTermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ShipmentCompanyEntity", "ShipmentCompanies")
                        .WithMany("Imports")
                        .HasForeignKey("ShipmentCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.StartPortEntity", "StartPorts")
                        .WithMany("Imports")
                        .HasForeignKey("StartPortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.StatusEntity", "Status")
                        .WithMany("Imports")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.SupplierEntity", "Suppliers")
                        .WithMany("Imports")
                        .HasForeignKey("SuppliersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.TransportCompanyEntity", "TransportCompanies")
                        .WithMany("Imports")
                        .HasForeignKey("TransportCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ImportFileEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ImportEntity", "Imports")
                        .WithMany("ImportFiles")
                        .HasForeignKey("ImportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.IoTAlertEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.IoTNotificationEntity", "IoTNotifications")
                        .WithMany("IoTAlerts")
                        .HasForeignKey("IoTNotificationsId");

                    b.HasOne("Productivo.Core.Entities.IoTVariableEntity", "IoTVariables")
                        .WithMany("IoTAlerts")
                        .HasForeignKey("IoTVariablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.IoTEntity", "IoTs")
                        .WithMany("IoTAlerts")
                        .HasForeignKey("IoTsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.IoTDataAlertNotificationEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.EmployeeEntity", "Employees")
                        .WithMany("IoTDataAlertNotifications")
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.IoTNotificationEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.IoTEntity", "IoTs")
                        .WithMany("IoTNotifications")
                        .HasForeignKey("IoTsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.IoTVariableEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.IoTEntity", "IoTs")
                        .WithMany("IoTVariables")
                        .HasForeignKey("IoTsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.MachineEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.BrandEntity", "Brands")
                        .WithMany("Machines")
                        .HasForeignKey("BrandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.IoTMachineEntity", null)
                        .WithMany("Machines")
                        .HasForeignKey("IoTMachineEntityId");

                    b.HasOne("Productivo.Core.Entities.LocationEntity", "Locations")
                        .WithMany("Machines")
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ProcessEntity", "Processes")
                        .WithMany("Machines")
                        .HasForeignKey("ProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.StatusEntity", "Status")
                        .WithMany("Machines")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.MeatCuttingEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ChannelEntity", "Channel")
                        .WithMany("CutsOfMeat")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.MeatCuttingEntity", "MainCut")
                        .WithMany("SubCuts")
                        .HasForeignKey("MainCutId");
                });

            modelBuilder.Entity("Productivo.Core.Entities.MetalUnitEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.DimensionEntity", "Dimensions")
                        .WithMany("MetalUnits")
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.FinishEntity", "Finisheses")
                        .WithMany("MetalUnits")
                        .HasForeignKey("FinishesesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.MetalUnitTypeEntity", "MetalUnitTypes")
                        .WithMany("MetalUnits")
                        .HasForeignKey("MetalUnitTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.SteelEntity", "Steels")
                        .WithMany("MetalUnits")
                        .HasForeignKey("SteelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ThicknessEntity", "Thicknesses")
                        .WithMany("MetalUnits")
                        .HasForeignKey("ThicknessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.WHLocationEntity", "WHLocations")
                        .WithMany("MetalUnits")
                        .HasForeignKey("WHLocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ModelQuestionEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.CategoryModelEntity", "CategoryModels")
                        .WithMany("ModelQuestions")
                        .HasForeignKey("CategoryModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.EvaluationCategoryEntity", "EvaluationCategories")
                        .WithMany("ModelQuestions")
                        .HasForeignKey("EvaluationCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ModuleEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ModuleCategoryEntity", "ModuleCategories")
                        .WithMany("Modules")
                        .HasForeignKey("ModuleCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ModuleRolEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.SubModuleEntity", "SubModules")
                        .WithMany("ModuleRoles")
                        .HasForeignKey("SubModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.MovementDetailEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.MovementBasicEntity", "MovementBasics")
                        .WithMany("MovementDetails")
                        .HasForeignKey("MovementBasicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.PackingListEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ImportDetailEntity", "ImportDetails")
                        .WithMany("PackingLists")
                        .HasForeignKey("ImportDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ImportEntity", "Imports")
                        .WithMany("PackingLists")
                        .HasForeignKey("ImportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.PaymentEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.BankEntity", "Banks")
                        .WithMany("Payments")
                        .HasForeignKey("BanksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.CurrencyEntity", "Currencies")
                        .WithMany("Payments")
                        .HasForeignKey("CurrenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ImportEntity", "Imports")
                        .WithMany("Payments")
                        .HasForeignKey("ImportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.PaymentTypeEntity", "PaymentTypes")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.PlanPaymentEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.PaymentTypeEntity", "PaymentTypes")
                        .WithMany("PlanPayments")
                        .HasForeignKey("PaymentTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.PlanEntity", "Plans")
                        .WithMany("PlanPayments")
                        .HasForeignKey("PlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ProductTypeEntity", "ProductTypes")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ShapeEntity", "Shapes")
                        .WithMany("Products")
                        .HasForeignKey("ShapesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.UnitEntity", "Units")
                        .WithMany("Products")
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductionInfoEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ProductionOrderEntity", "ProductionOrders")
                        .WithMany("ProductionInfos")
                        .HasForeignKey("ProductionOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ProductEntity", "Products")
                        .WithMany("ProductionInfos")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductionOrderDetailEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.EmployeeEntity", "Employees")
                        .WithMany("ProductionOrderDetails")
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ProductionOrderEntity", "ProductionOrders")
                        .WithMany("ProductionOrderDetails")
                        .HasForeignKey("ProductionOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductionOrderEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ProductEntity", "Products")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ShiftEntity", "Shifts")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("ShiftsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.StatusEntity", "Status")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductionOrderFileEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ProductionOrderEntity", "ProductionOrders")
                        .WithMany("ProductionOrderFiles")
                        .HasForeignKey("ProductionOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductionOrderProcessEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.EmployeeEntity", "Employees")
                        .WithMany("ProductionOrderProcesses")
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.MachineEntity", "Machines")
                        .WithMany("ProductionOrderProcesses")
                        .HasForeignKey("MachinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ProductionOrderEntity", "ProductionOrders")
                        .WithMany("ProductionOrderProcesses")
                        .HasForeignKey("ProductionOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProductionStopEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.EmployeeEntity", "Employees")
                        .WithMany("ProductionStops")
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.MachineEntity", "Machines")
                        .WithMany("ProductionStops")
                        .HasForeignKey("MachinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ProductionOrderEntity", "ProductionOrders")
                        .WithMany("ProductionStops")
                        .HasForeignKey("ProductionOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.StopEntity", "Stops")
                        .WithMany("ProductionStops")
                        .HasForeignKey("StopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProtectionElementEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ProtectionTypeEntity", "ProtectionTypes")
                        .WithMany("ProtectionElements")
                        .HasForeignKey("ProtectionTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.UnitEntity", "Units")
                        .WithMany("ProtectionElements")
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ProtectionTypeEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ProtectionCategoryEntity", "ProtectionCategories")
                        .WithMany("ProtectionTypes")
                        .HasForeignKey("ProtectionCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.RawMaterialEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.PackingListEntity", "PackingLists")
                        .WithMany()
                        .HasForeignKey("PackingListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ProductionOrderEntity", "ProductionOrders")
                        .WithMany()
                        .HasForeignKey("ProductionOrdersId");

                    b.HasOne("Productivo.Core.Entities.RawMaterialTypeEntity", null)
                        .WithMany("RawMaterials")
                        .HasForeignKey("RawMaterialTypeEntityId");

                    b.HasOne("Productivo.Core.Entities.MetalUnitTypeEntity", "RawMaterialTypes")
                        .WithMany()
                        .HasForeignKey("RawMaterialTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.WHLocationEntity", "WHLocations")
                        .WithMany()
                        .HasForeignKey("WHLocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.RouteEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.InstallationEntity", "Installations")
                        .WithMany("Routes")
                        .HasForeignKey("InstallationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.RouteOperationEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ProcessEntity", "Processes")
                        .WithMany("RouteOperations")
                        .HasForeignKey("ProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.RouteEntity", "Routes")
                        .WithMany("RouteOperations")
                        .HasForeignKey("RoutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.StartPortEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.CountryEntity", "Countries")
                        .WithMany("StartPorts")
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.StopEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.AreaEntity", "Areas")
                        .WithMany("Stops")
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.StopsCategoryEntity", "StopsCategories")
                        .WithMany("Stops")
                        .HasForeignKey("StopsCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.StrippingDetailEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ChannelEntity", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.StrippingEntity", "Stripping")
                        .WithMany("StrippingDetails")
                        .HasForeignKey("StrippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.StrippingEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.StatusEntity", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.SubModuleEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.ModuleEntity", "Modules")
                        .WithMany("SubModules")
                        .HasForeignKey("ModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.SubSectorEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.SectorEntity", "Sectors")
                        .WithMany("SubSectors")
                        .HasForeignKey("SectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.SupplierEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.CountryEntity", "Countries")
                        .WithMany("Suppliers")
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.SupplierTypeEntity", "SupplierTypes")
                        .WithMany("Suppliers")
                        .HasForeignKey("SupplierTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.TaskTypeEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.JobEntity", "Jobs")
                        .WithMany("TaskTypes")
                        .HasForeignKey("JobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.ToolEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.StatusEntity", "Status")
                        .WithMany("Tools")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.ToolTypeEntity", "ToolTypes")
                        .WithMany("Tools")
                        .HasForeignKey("ToolTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.VendorEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.InstallationEntity", "Installations")
                        .WithMany("Vendors")
                        .HasForeignKey("InstallationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Productivo.Core.Entities.VendorTypeEntity", "VendorTypes")
                        .WithMany("Vendors")
                        .HasForeignKey("VendorTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Productivo.Core.Entities.WareHouseEntity", b =>
                {
                    b.HasOne("Productivo.Core.Entities.WareHouseTypeEntity", "WareHouseTypes")
                        .WithMany("WareHouses")
                        .HasForeignKey("WareHouseTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
